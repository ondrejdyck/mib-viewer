name: Build and Release MIB Viewer

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: 'true'
        type: boolean

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Display Python and system info
      run: |
        echo "=== System Information ==="
        python --version
        pip --version
        echo "Platform: ${{ runner.os }}"
        echo "Architecture: ${{ runner.arch }}"
        echo "Working directory: $(pwd)"
        echo "Available disk space:"
        Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
    
    - name: Install dependencies with verbose logging
      run: |
        echo "=== Installing Python Dependencies ==="
        echo "Using pip to install dependencies (avoiding uv PyQt5 wheel issues)..."
        pip install --upgrade pip
        echo "Installing build dependencies..."
        pip install pyinstaller
        echo "Installing application dependencies..."
        pip install PyQt5 pyqtgraph numpy matplotlib h5py emdfile tqdm py4dstem
        echo "=== Dependency Installation Complete ==="
        pip list
    
    - name: Verify installation
      run: |
        echo "=== Verifying Installation ==="
        python -c "import PyQt5; print('‚úÖ PyQt5 imported successfully')"
        python -c "import pyqtgraph; print('‚úÖ PyQtGraph imported successfully')" 
        python -c "import numpy; print('‚úÖ NumPy imported successfully')"
        python -c "import matplotlib; print('‚úÖ Matplotlib imported successfully')"
        python -c "import h5py; print('‚úÖ h5py imported successfully')"
        echo "=== All imports successful ==="
        
    - name: Test import of main application
      run: |
        echo "=== Testing Application Imports ==="
        python -c "from src.mib_viewer.gui.mib_viewer_pyqtgraph import MibViewerPyQtGraph; print('‚úÖ Main app class imported')"
        python -c "from src.mib_viewer.gui.mib_viewer_qt import load_mib; print('‚úÖ MIB loading functions imported')"
        echo "=== Application imports successful ==="
    
    - name: Build executable with multiple strategies
      run: |
        echo "=== Building Windows Executable ==="
        echo "Strategy 1: Using PyInstaller spec file..."
        if (Test-Path "MibViewer.spec") {
          pyinstaller MibViewer.spec --distpath dist --workpath build
          if (Test-Path "dist/MibViewer.exe") {
            echo "‚úÖ Strategy 1 SUCCESS: Spec file build completed"
            $exe_size = (Get-Item "dist/MibViewer.exe").Length / 1MB
            echo "Executable size: $($exe_size.ToString('F1')) MB"
          } else {
            echo "‚ùå Strategy 1 FAILED: Spec file build failed"
          }
        }
        
        if (-not (Test-Path "dist/MibViewer.exe")) {
          echo "Strategy 2: Direct PyInstaller command..."
          pyinstaller --onefile --windowed --name=MibViewer `
            --add-data "src;src" `
            --hidden-import=mib_viewer.gui.mib_viewer_pyqtgraph `
            --hidden-import=mib_viewer.gui.mib_viewer_qt `
            --hidden-import=PyQt5 `
            --hidden-import=pyqtgraph `
            --hidden-import=numpy `
            --hidden-import=matplotlib `
            --hidden-import=h5py `
            standalone_main.py
          
          if (Test-Path "dist/MibViewer.exe") {
            echo "‚úÖ Strategy 2 SUCCESS: Direct build completed"
            $exe_size = (Get-Item "dist/MibViewer.exe").Length / 1MB
            echo "Executable size: $($exe_size.ToString('F1')) MB"
          } else {
            echo "‚ùå Strategy 2 FAILED: Direct build failed" 
            exit 1
          }
        }
    
    - name: Verify executable
      run: |
        echo "=== Verifying Executable ==="
        if (Test-Path "dist/MibViewer.exe") {
          $exe = Get-Item "dist/MibViewer.exe"
          echo "‚úÖ Executable created successfully"
          echo "File: $($exe.Name)"
          echo "Size: $([math]::Round($exe.Length/1MB, 2)) MB"
          echo "Created: $($exe.CreationTime)"
          echo "Full path: $($exe.FullName)"
        } else {
          echo "‚ùå ERROR: MibViewer.exe not found!"
          echo "Contents of dist directory:"
          Get-ChildItem dist -Recurse
          exit 1
        }
    
    - name: Upload executable as artifact
      uses: actions/upload-artifact@v3
      with:
        name: MibViewer-Windows-exe
        path: dist/MibViewer.exe
        retention-days: 30
    
    - name: Create GitHub Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/MibViewer.exe
        name: MIB Viewer ${{ github.ref_name }}
        body: |
          # MIB Viewer ${{ github.ref_name }}
          
          ## üöÄ Windows Executable
          
          **Download**: `MibViewer.exe` (attached below)
          
          ## ‚ú® Features
          - **EELS Analysis**: Hardware-accelerated PyQtGraph interface
          - **4D STEM Support**: Virtual detector analysis with BF/DF imaging
          - **Standalone**: No Python installation required
          - **Performance**: Real-time interaction with optimized updates
          
          ## üìã System Requirements
          - Windows 10/11 (64-bit)
          - 4GB+ RAM (8GB+ recommended for large datasets)
          - No additional software required
          
          ## üîß Usage
          1. Download `MibViewer.exe`
          2. Double-click to run
          3. Load MIB files via File menu
          4. Switch between EELS and 4D STEM tabs
          
          **Repository**: https://github.com/ondrejdyck/mib-viewer
          **Documentation**: See README.md for detailed usage instructions
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
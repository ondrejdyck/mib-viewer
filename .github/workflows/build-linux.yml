name: Build Linux Executable

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      ubuntu_version:
        description: 'Ubuntu version to build on'
        required: false
        default: 'ubuntu-20.04'
        type: choice
        options:
          - ubuntu-20.04
          - ubuntu-22.04
          - ubuntu-latest
      upload_artifact:
        description: 'Upload build artifact'
        required: false
        default: 'true'
        type: boolean

permissions:
  actions: read
  contents: read

jobs:
  build-linux:
    runs-on: ${{ github.event.inputs.ubuntu_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Display Python and system info
      run: |
        echo "=== System Information ==="
        python --version
        pip --version
        echo "Platform: ${{ runner.os }}"
        echo "Architecture: ${{ runner.arch }}"
        echo "Ubuntu version: ${{ github.event.inputs.ubuntu_version }}"
        echo "Working directory: $(pwd)"
        echo "Available disk space:"
        df -h
        echo "GLIBC version:"
        ldd --version
    
    - name: Install system dependencies
      run: |
        echo "=== Installing System Dependencies ==="
        sudo apt-get update
        echo "Installing basic system libraries for PyQt5..."
        sudo apt-get install -y libglib2.0-0 libdbus-1-3 libfontconfig1 libxcb1 libxkbcommon0
        echo "System dependencies installation completed"
    
    - name: Install Python dependencies
      run: |
        echo "=== Installing Python Dependencies ==="
        pip install --upgrade pip
        echo "Installing build dependencies..."
        pip install pyinstaller
        echo "Installing GUI framework..."
        pip install PyQt5
        echo "Installing application dependencies..."
        pip install pyqtgraph numpy matplotlib h5py emdfile tqdm py4dstem
        echo "=== Dependency Installation Complete ==="
        pip list
    
    - name: Verify installation
      run: |
        echo "=== Verifying Installation ==="
        python -c "import PyQt5; print('[OK] PyQt5 imported successfully')"
        python -c "import pyqtgraph; print('[OK] PyQtGraph imported successfully')" 
        python -c "import numpy; print('[OK] NumPy imported successfully')"
        python -c "import matplotlib; print('[OK] Matplotlib imported successfully')"
        python -c "import h5py; print('[OK] h5py imported successfully')"
        echo "=== All imports successful ==="
        
    - name: Test import of main application
      run: |
        echo "=== Testing Application Imports ==="
        python -c "from src.mib_viewer.gui.mib_viewer_pyqtgraph import MibViewerPyQtGraph; print('[OK] Main app class imported')"
        python -c "from src.mib_viewer.io.mib_loader import load_mib; print('[OK] MIB loading functions imported')"
        echo "=== Application imports successful ==="
    
    - name: Extract version number
      id: get-version
      run: |
        echo "=== Extracting Version Number ==="
        VERSION=$(python -c "import sys; sys.path.append('src'); from mib_viewer import __version__; print(__version__)")
        echo "Detected version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build Linux executable
      run: |
        echo "=== Building Linux Executable (v$VERSION) ==="
        UBUNTU_VER=$(echo "${{ github.event.inputs.ubuntu_version }}" | sed 's/ubuntu-//' | sed 's/.04//')
        BINARY_NAME="MibViewer-Ubuntu${UBUNTU_VER}-v${VERSION}"
        echo "Binary name: $BINARY_NAME"

        echo "Strategy 1: Using PyInstaller spec file..."
        if [ -f "MibViewer.spec" ]; then
          pyinstaller MibViewer.spec --distpath dist-linux --workpath build-linux
          if [ -f "dist-linux/MibViewer-Ubuntu22+" ]; then
            # Rename to include version
            mv "dist-linux/MibViewer-Ubuntu22+" "dist-linux/$BINARY_NAME"
            echo "[SUCCESS] Strategy 1: Spec file build completed"
            exe_size=$(du -m "dist-linux/$BINARY_NAME" | cut -f1)
            echo "Executable size: ${exe_size} MB"
          else
            echo "[FAILED] Strategy 1: Spec file build failed"
          fi
        fi

        if [ ! -f "dist-linux/$BINARY_NAME" ]; then
          echo "Strategy 2: Direct PyInstaller command..."
          pyinstaller --onefile --windowed --name="$BINARY_NAME" \
            --add-data "src:src" \
            --hidden-import=mib_viewer.gui.mib_viewer_pyqtgraph \
            --hidden-import=mib_viewer.io.mib_loader \
            --hidden-import=PyQt5 \
            --hidden-import=pyqtgraph \
            --hidden-import=numpy \
            --hidden-import=h5py \
            --distpath dist-linux \
            src/mib_viewer/__main__.py

          if [ -f "dist-linux/$BINARY_NAME" ]; then
            echo "[SUCCESS] Strategy 2: Direct build completed"
            exe_size=$(du -m "dist-linux/$BINARY_NAME" | cut -f1)
            echo "Executable size: ${exe_size} MB"
          else
            echo "[FAILED] Strategy 2: Direct build failed"
            exit 1
          fi
        fi

        # Store binary name for later steps
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
    
    - name: Verify executable and set permissions
      run: |
        echo "=== Verifying Linux Executable ==="
        if [ -f "dist-linux/$BINARY_NAME" ]; then
          echo "[SUCCESS] Executable created successfully"
          ls -la "dist-linux/$BINARY_NAME"
          file "dist-linux/$BINARY_NAME"
          echo "Making executable..."
          chmod +x "dist-linux/$BINARY_NAME"
          echo "Final permissions:"
          ls -la "dist-linux/$BINARY_NAME"
          echo "Build environment info:"
          echo "Ubuntu version: ${{ github.event.inputs.ubuntu_version }}"
          echo "Binary name: $BINARY_NAME"
          ldd --version | head -1
        else
          echo "[ERROR] $BINARY_NAME executable not found!"
          echo "Contents of dist-linux directory:"
          ls -la dist-linux/ || echo "dist-linux directory does not exist"
          exit 1
        fi
    
    - name: Upload executable as artifact
      if: github.event.inputs.upload_artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}
        path: dist-linux/${{ env.BINARY_NAME }}
        retention-days: 30